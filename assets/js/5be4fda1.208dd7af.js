"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[773],{59982:e=>{e.exports=JSON.parse('{"functions":[{"name":"TagObject","desc":"Tags an object with a specific tag.","params":[{"name":"Object","desc":"The object to tag.","lua_type":"Instance"},{"name":"Tag","desc":"The tag to assign to the object.","lua_type":"string"}],"returns":[],"function_type":"static","source":{"line":39,"path":"src/shared/Atlas.lua"}},{"name":"LoadLibrary","desc":"    Loads a library module by its name.\\n    @param ModuleName string -- The name of the module to load.\\n    @return any? -- Returns the loaded module or nil if not found.","params":[{"name":"ModuleName","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"any?\\r\\n"}],"function_type":"method","source":{"line":51,"path":"src/shared/Atlas.lua"}},{"name":"GetObject","desc":"Retrieves an object by name with an optional timeout.","params":[{"name":"ObjectName","desc":"The name of the object to retrieve.","lua_type":"string"},{"name":"Timeout","desc":"The optional timeout duration.","lua_type":"number?"}],"returns":[{"desc":"Returns the object if found, or nil if not.","lua_type":"Instance?"}],"function_type":"method","source":{"line":81,"path":"src/shared/Atlas.lua"}},{"name":"New","desc":"Creates a new instance of a specified class.","params":[{"name":"ClassName","desc":"The class name of the instance to create.","lua_type":"string"}],"returns":[{"desc":"Returns the newly created instance, or nil if the class name is invalid.","lua_type":"Instance?"}],"function_type":"method","source":{"line":123,"path":"src/shared/Atlas.lua"}},{"name":"BindToTag","desc":"Binds a callback function to a tag. The callback is invoked for all existing objects with the tag and whenever a new object is tagged.","params":[{"name":"Tag","desc":"The tag to bind the callback to.","lua_type":"string"},{"name":"Callback","desc":"The callback function to execute when an object with the tag is found.","lua_type":"function"}],"returns":[{"desc":"The connection to the event, which can be disconnected if needed.","lua_type":"RBXScriptConnection"}],"function_type":"method","source":{"line":144,"path":"src/shared/Atlas.lua"}},{"name":"GetObjects","desc":"Retrieves all objects with a specific tag.","params":[{"name":"Tag","desc":"The tag to search for.","lua_type":"string"}],"returns":[{"desc":"Returns a table of all objects found with the tag.","lua_type":"{Instance}"}],"function_type":"method","source":{"line":164,"path":"src/shared/Atlas.lua"}},{"name":"ApplySettings","desc":"Applies a set of settings to an object.","params":[{"name":"Object","desc":"The object to apply the settings to.","lua_type":"Instance"},{"name":"Settings","desc":"A table of settings to apply.","lua_type":"{[string]: any}"}],"returns":[],"function_type":"method","source":{"line":183,"path":"src/shared/Atlas.lua"}},{"name":"GenerateUniqueId","desc":"Generates a unique ID using a GUID.","params":[],"returns":[{"desc":"Returns a unique ID string.","lua_type":"string"}],"function_type":"method","source":{"line":203,"path":"src/shared/Atlas.lua"}},{"name":"LogOperation","desc":"Logs an operation with optional details.","params":[{"name":"Operation","desc":"The operation to log.","lua_type":"string"},{"name":"Details","desc":"Optional details about the operation.","lua_type":"{[string]: any}?"}],"returns":[],"function_type":"method","source":{"line":214,"path":"src/shared/Atlas.lua"}},{"name":"DeepClone","desc":"Deep clones an object and tags all its descendants.","params":[{"name":"Object","desc":"The object to clone.","lua_type":"Instance"}],"returns":[{"desc":"Returns the cloned object.","lua_type":"Instance"}],"function_type":"method","source":{"line":229,"path":"src/shared/Atlas.lua"}},{"name":"TagObject","desc":"Tags an object with a specific tag.","params":[{"name":"Object","desc":"The object to tag.","lua_type":"Instance"},{"name":"Tag","desc":"The tag to assign.","lua_type":"string"}],"returns":[],"function_type":"method","source":{"line":249,"path":"src/shared/Atlas.lua"}},{"name":"RemoveTag","desc":"Removes an object with a specific tag.","params":[{"name":"Object","desc":"The object to tag.","lua_type":"Instance"},{"name":"Tag","desc":"The tag to assign.","lua_type":"string"}],"returns":[],"function_type":"method","source":{"line":264,"path":"src/shared/Atlas.lua"}},{"name":"GetObjectWithTag","desc":"Retrieves all objects with a specific tag.","params":[{"name":"Tag","desc":"The tag to search for.","lua_type":"string"}],"returns":[{"desc":"Returns a table of all objects found with the tag.","lua_type":"{Instance}"}],"function_type":"method","source":{"line":279,"path":"src/shared/Atlas.lua"}}],"properties":[],"types":[],"name":"Atlas","desc":"Atlas is a framework module that provides utility functions for managing and interacting with objects and modules within a Roblox game. ","source":{"line":5,"path":"src/shared/Atlas.lua"}}')}}]);